plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
}

def version_base = "${project.version_major}.${project.version_minor}"

version = version_base + (project.version_patch > 0 ? ".${project.version_patch}" : "")
group = project.maven_group

// Jenkins
if (System.getenv('BUILD_NUMBER') != null) {
    version = version_base + "." + System.getenv('BUILD_NUMBER') + "d"
}

repositories {
    maven { url = "https://maven.firstdarkdev.xyz/releases" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases" }
    maven { url "https://maven.bai.lol" }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    implementation 'me.hypherionmc.night-config:toml:3.6.5_custom'
    include 'me.hypherionmc.night-config:core:3.6.5_custom'
    include 'me.hypherionmc.night-config:toml:3.6.5_custom'

    modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_config}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation "com.terraformersmc:modmenu:${mod_menu}"
    modCompileOnly "mcp.mobius.waila:wthit-api:fabric-${wthitVersion}"
    modRuntime "mcp.mobius.waila:wthit:fabric-${wthitVersion}"

}

loom {
    accessWidenerPath = file("src/main/resources/hyperlighting.accesswidener")
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name + "-1.18.2"
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

task delDevJar {
    doLast {
        def tree = fileTree('build/libs')
        tree.include '**/*-dev.jar'
        tree.each { it.delete() }
    }
}

build.finalizedBy delDevJar
