buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: "maven-publish"

group = 'me.hypherionmc'
version = mod_version
archivesBaseName = 'HyperLighting-1.16.5'

// Jenkins
if (System.getenv('BUILD_NUMBER') != null) {
    version = "dev-" + System.getenv('BUILD_NUMBER')
    jar.archiveName = archivesBaseName + "-dev-" + System.getenv('BUILD_NUMBER') + ".jar"
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20210309-1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                hyperlighting {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                hyperlighting {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'hyperlighting', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                hyperlighting {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://maven.hypherionmc.me" }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven { // TOP
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
    maven { url "https://maven.shedaniel.me/" }
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.16.5-36.1.32'

    // The new Hyper Lighting Core - Now known as RGBLib
    implementation "me.hypherionmc:RGBLib:${rgblib_version}:api"
    //runtimeOnly "me.hypherionmc:RGBLib:${rgblib_version}"

    compileOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}")

    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.1.2-20:api")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.1.2-20")

    compile(fg.deobf("me.shedaniel.cloth:cloth-config-forge:4.11.26"))
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "hyperlighting",
                "Specification-Vendor"    : "HypherionSA",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "HypherionSA",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

task apiJar(type: Jar) {
    classifier = "api"
    from(sourceSets.main.output) {
        include "me/hypherionmc/hyperlighting/api/**"
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(apiJar) {
                builtBy apiJar
            }
            artifact(jar) {
                builtBy jar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        //mavenLocal()
        maven {
            url project.mavenUrl
            credentials {
                username System.getenv('MAVEN_USER')
                password System.getenv('MAVEN_PASS')
            }
        }
    }
}